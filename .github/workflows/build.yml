name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    tags:
      - 'v*.*.*'

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest

    env:
      Solution_Name: POE2AffinityService
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Restore dependencies
      run: dotnet restore

    - name: Build and Publish as Single File
      run: dotnet publish --configuration Release --output ./publish --self-contained --runtime win-x64 -p:PublishSingleFile=true -p:PublishTrimmed=true

    - name: Check if Release Exists
      id: check_release
      uses: actions/github-script@v6
      with:
        script: |
          const { data: releases } = await github.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          const release = releases.find(release => release.tag_name === context.ref.replace('refs/tags/', ''));
          if (release) {
            return { id: release.id, exists: true, upload_url: release.upload_url };
          } else {
            return { exists: false };
          }

    - name: Create or Update Release
      id: create_or_update_release
      uses: actions/github-script@v6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        script: |
          const tagName = context.ref.replace('refs/tags/', '');
          if (steps.check_release.outputs.exists === 'true') {
            await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: steps.check_release.outputs.id,
              tag_name: tagName,
              name: 'Release ' + tagName,
              draft: false,
              prerelease: false,
            });
          } else {
            const release = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: 'Release ' + tagName,
              draft: false,
              prerelease: false,
            });
            return { upload_url: release.data.upload_url };
          }

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_or_update_release.outputs.upload_url }}
        asset_path: ./publish/POE2AffinityService.exe
        asset_name: POE2AffinityService.exe
        asset_content_type: application/octet-stream
